<?xml version='1.0' encoding='utf-8'?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
<!-- based on https://svn.boost.org/trac/boost/wiki/DebuggerVisualizers -->
<!--boost::adjacency_list<OutEdgeList, VertexList, Directed, VertexProperties, EdgeProperties, GraphProperties, EdgeList>-->
<Type Name="boost::adjacency_list&lt;*,*,*,*,*&gt;">
    <DisplayString>{{edges={m_edges} vertices={m_vertices}}}</DisplayString>
    <Expand>
        <Item Name="[edges]">m_edges</Item>
        <Item Name="[vertices]">m_vertices</Item>
    </Expand>
</Type>

<!--  boost < 1.61 -->
<Type Name="boost::atomics::atomic&lt;*&gt;">
    <DisplayString>{*($T1 *)&amp;m_storage}</DisplayString>
    <Expand>
        <Item Name="[value]">*($T1 *)&amp;m_storage</Item>
    </Expand>
</Type>

<!--  boost < 1.61 -->
<Type Name="boost::atomics::atomic_flag" Priority="MediumLow">
    <DisplayString>{(bool)(m_storage &amp; 1)}</DisplayString>
    <Expand/>
</Type>

<!--  boost >= 1.61 -->
<Type Name="boost::atomic&lt;*&gt;">
    <DisplayString>{*($T1 *)&amp;m_storage}</DisplayString>
    <Expand>
        <Item Name="[value]">*($T1 *)&amp;m_storage</Item>
    </Expand>
</Type>

<!--  boost >= 1.61 -->
<Type Name="boost::atomics::atomic_flag" Priority="Medium">
    <DisplayString>{(bool)(m_storage.value &amp; 1)}</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::filesystem::path">
    <DisplayString>path={m_pathname}</DisplayString>
    <StringView>m_pathname,su</StringView>
    <Expand>
        <ExpandedItem>m_pathname</ExpandedItem>
    </Expand>
</Type>

<Type Name="boost::filesystem::file_status">
    <DisplayString>type="{m_value}" permissions="{m_perms}"</DisplayString>
    <Expand>
        <Item Name="type">m_value</Item>
        <Item Name="permissions">m_perms</Item>
    </Expand>
</Type>

<Type Name="boost::filesystem::directory_entry">
    <DisplayString Condition="m_status.m_value == m_symlink_status.m_value &amp;&amp; m_status.m_perms == m_symlink_status.m_perms">{m_path} status=({m_status})</DisplayString>
    <DisplayString>{m_path} status=({m_status}) symlink_status=({m_symlink_status})</DisplayString>
</Type>

<Type Name="boost::filesystem::directory_iterator">
    <DisplayString Condition="m_imp.px == 0">empty</DisplayString>
    <DisplayString>{m_imp.px-&gt;dir_entry}</DisplayString>
    <Expand>
        <ExpandedItem Condition="m_imp.px != 0">m_imp.px-&gt;dir_entry</ExpandedItem>
    </Expand>
</Type>

<Type Name="boost::logic::tribool">
    <DisplayString Condition="value == 1">true</DisplayString>
    <DisplayString Condition="value == 2">indeterminate</DisplayString>
    <DisplayString>false</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::any::holder&lt;*&gt;">
    <DisplayString>{held}</DisplayString>
    <Expand>
        <ExpandedItem>held</ExpandedItem>
    </Expand>
</Type>

<Type Name="boost::any">
    <DisplayString Condition="content == 0">[empty]</DisplayString>
    <DisplayString Condition="content != 0">{*content}</DisplayString>
    <Expand>
        <Item Name="[holder]" Condition="content != 0">*content</Item>
    </Expand>
</Type>

<Type Name="boost::detail::reference_content&lt;*&gt;">
    <DisplayString>{content_}</DisplayString>
    <Expand>
        <ExpandedItem>content_</ExpandedItem>
    </Expand>
</Type>

<Type Name="boost::optional_detail::aligned_storage&lt;*&gt;">
    <DisplayString>{*(($T1 *)dummy_.data)}</DisplayString>
    <Expand>
        <ExpandedItem>*(($T1 *)dummy_.data)</ExpandedItem>
    </Expand>
</Type>

<Type Name="boost::optional&lt;*&gt;" Priority="Medium">
    <AlternativeType Name="boost::optional_detail::optional_base&lt;*&gt;" />
    <DisplayString Condition="m_initialized">{m_storage}</DisplayString>
    <DisplayString Condition="!m_initialized">nullopt</DisplayString>
    <Expand>
        <Item Condition="m_initialized" Name="value">m_storage</Item>
    </Expand>
</Type>

<Type Name="boost::optional&lt;*&gt;" Priority="MediumLow">
    <AlternativeType Name="boost::optional_detail::optional_base&lt;*&gt;" />
    <DisplayString Condition="ptr_ == 0">nullopt</DisplayString>
    <DisplayString Condition="ptr_ != 0">{*ptr_}</DisplayString>
    <Expand>
        <Item Condition="ptr_ != 0" Name="value">*ptr_</Item>
    </Expand>
</Type>

<Type Name="boost::interprocess::offset_ptr&lt;*,*,*,*&gt;">
    <SmartPointer Usage="Minimal">($T1*)((($T3)this)+internal.m_offset),na</SmartPointer>
    <DisplayString Condition="internal.m_offset == 1">empty</DisplayString>
    <DisplayString Condition="internal.m_offset != 1">offset_ptr {*($T1*)((($T3)this)+internal.m_offset)}</DisplayString>
    <Expand>
        <Item Condition="internal.m_offset != 1" Name="[ptr]">($T1*)((($T3)this)+internal.m_offset)</Item>
    </Expand>
</Type>

<!--boost::mutex::scoped_lock and boost::mutex::scoped_try_lock-->
<Type Name="boost::unique_lock&lt;*&gt;">
    <DisplayString Condition="is_locked">locked</DisplayString>
    <DisplayString Condition="!is_locked">not locked</DisplayString>
    <Expand>
        <Item Name="mutex">m</Item>
    </Expand>
</Type>

<Type Name="boost::ratio&lt;1,1&gt;">
    <DisplayString></DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1,1000000000000000000&gt;">
    <DisplayString>atto</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1,1000000000000000&gt;">
    <DisplayString>femto</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1,1000000000000&gt;">
    <DisplayString>pico</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1,1000000000&gt;">
    <DisplayString>nano</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1,1000000&gt;">
    <DisplayString>micro</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1,1000&gt;">
    <DisplayString>milli</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1,100&gt;">
    <DisplayString>centi</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1,10&gt;">
    <DisplayString>deci</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;10,1&gt;">
    <DisplayString>deca</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;100,1&gt;">
    <DisplayString>hecto</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1000,1&gt;">
    <DisplayString>kilo</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1000000,1&gt;">
    <DisplayString>mega</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1000000000,1&gt;">
    <DisplayString>giga</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1000000000000,1&gt;">
    <DisplayString>tera</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1000000000000000,1&gt;">
    <DisplayString>peta</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;1000000000000000000,1&gt;">
    <DisplayString>exa</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::ratio&lt;*,*&gt;">
    <DisplayString Condition="$T2 == 1">ratio {"$T1"}</DisplayString>
    <DisplayString>ratio {$T1}/{$T2}</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::basic_string_view&lt;*&gt;">
    <AlternativeType Name="boost::basic_string_ref&lt;*&gt;" />
    <DisplayString>{ptr_,[len_]na}</DisplayString>
    <StringView>ptr_,[len_]na</StringView>
    <Expand>
        <Item Name="[size]" ExcludeView="simple">len_</Item>
        <ArrayItems>
            <Size>len_</Size>
            <ValuePointer>ptr_</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="boost::tuples::tuple&lt;boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type&gt;">
    <AlternativeType Name="boost::tuples::tuple&lt;&gt;" />
    <DisplayString IncludeView="noparens"></DisplayString>
    <DisplayString ExcludeView="noparens">({*this,view(noparens)})</DisplayString>
    <DisplayString>()</DisplayString>
    <Expand/>
</Type>

<Type Name="boost::tuples::tuple&lt;*,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type&gt;">
    <AlternativeType Name="boost::tuples::tuple&lt;*&gt;" />
    <DisplayString IncludeView="noparens">{head,na}</DisplayString>
    <DisplayString ExcludeView="noparens">({*this,view(noparens)})</DisplayString>
    <Expand>
        <Item Name="[0]">head</Item>
    </Expand>
</Type>

<Type Name="boost::tuples::tuple&lt;*,*,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type&gt;">
    <AlternativeType Name="boost::tuples::tuple&lt;*,*&gt;" />
    <DisplayString IncludeView="noparens">{head,na}, {tail.head,na}</DisplayString>
    <DisplayString ExcludeView="noparens">({*this,view(noparens)})</DisplayString>
    <Expand>
        <Item Name="[0]">head</Item>
        <Item Name="[1]">tail.head</Item>
    </Expand>
</Type>

<Type Name="boost::tuples::tuple&lt;*,*,*,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type&gt;">
    <AlternativeType Name="boost::tuples::tuple&lt;*,*,*&gt;" />
    <DisplayString IncludeView="noparens">{head,na}, {tail.head,na}, {tail.tail.head,na}</DisplayString>
    <DisplayString ExcludeView="noparens">({*this,view(noparens)})</DisplayString>
    <Expand>
        <Item Name="[0]">head</Item>
        <Item Name="[1]">tail.head</Item>
        <Item Name="[2]">tail.tail.head</Item>
    </Expand>
</Type>

<Type Name="boost::tuples::tuple&lt;*,*,*,*,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type&gt;">
    <AlternativeType Name="boost::tuples::tuple&lt;*,*,*,*&gt;" />
    <DisplayString IncludeView="noparens">{head,na}, {tail.head,na}, {tail.tail.head,na}, {tail.tail.tail.head,na}</DisplayString>
    <DisplayString ExcludeView="noparens">({*this,view(noparens)})</DisplayString>
    <Expand>
        <Item Name="[0]">head</Item>
        <Item Name="[1]">tail.head</Item>
        <Item Name="[2]">tail.tail.head</Item>
        <Item Name="[3]">tail.tail.tail.head</Item>
    </Expand>
</Type>

<Type Name="boost::tuples::tuple&lt;*,*,*,*,*,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type&gt;">
    <AlternativeType Name="boost::tuples::tuple&lt;*,*,*,*,*&gt;" />
    <DisplayString IncludeView="noparens">{head,na}, {tail.head,na}, {tail.tail.head,na}, {tail.tail.tail.head,na}, {tail.tail.tail.tail.head,na}</DisplayString>
    <DisplayString ExcludeView="noparens">({*this,view(noparens)})</DisplayString>
    <Expand>
        <Item Name="[0]">head</Item>
        <Item Name="[1]">tail.head</Item>
        <Item Name="[2]">tail.tail.head</Item>
        <Item Name="[3]">tail.tail.tail.head</Item>
        <Item Name="[4]">tail.tail.tail.tail.head</Item>
    </Expand>
</Type>

<Type Name="boost::tuples::tuple&lt;*,*,*,*,*,*,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type&gt;">
    <AlternativeType Name="boost::tuples::tuple&lt;*,*,*,*,*,*&gt;" />
    <DisplayString IncludeView="noparens">{head,na}, {tail.head,na}, {tail.tail.head,na}, {tail.tail.tail.head,na}, {tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.head,na}</DisplayString>
    <DisplayString ExcludeView="noparens">({*this,view(noparens)})</DisplayString>
    <Expand>
        <Item Name="[0]">head</Item>
        <Item Name="[1]">tail.head</Item>
        <Item Name="[2]">tail.tail.head</Item>
        <Item Name="[3]">tail.tail.tail.head</Item>
        <Item Name="[4]">tail.tail.tail.tail.tail.head</Item>
        <Item Name="[5]">tail.tail.tail.tail.tail.tail.head</Item>
    </Expand>
</Type>

<Type Name="boost::tuples::tuple&lt;*,*,*,*,*,*,*,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type&gt;">
    <AlternativeType Name="boost::tuples::tuple&lt;*,*,*,*,*,*,*&gt;" />
    <DisplayString IncludeView="noparens">{head,na}, {tail.head,na}, {tail.tail.head,na}, {tail.tail.tail.head,na}, {tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.tail.head,na}</DisplayString>
    <DisplayString ExcludeView="noparens">({*this,view(noparens)})</DisplayString>
    <Expand>
        <Item Name="[0]">head</Item>
        <Item Name="[1]">tail.head</Item>
        <Item Name="[2]">tail.tail.head</Item>
        <Item Name="[3]">tail.tail.tail.head</Item>
        <Item Name="[4]">tail.tail.tail.tail.tail.head</Item>
        <Item Name="[5]">tail.tail.tail.tail.tail.tail.head</Item>
        <Item Name="[6]">tail.tail.tail.tail.tail.tail.tail.head</Item>
    </Expand>
</Type>

<Type Name="boost::tuples::tuple&lt;*,*,*,*,*,*,*,*,boost::tuples::null_type,boost::tuples::null_type&gt;">
    <AlternativeType Name="boost::tuples::tuple&lt;*,*,*,*,*,*,*,*&gt;" />
    <DisplayString IncludeView="noparens">{head,na}, {tail.head,na}, {tail.tail.head,na}, {tail.tail.tail.head,na}, {tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.tail.tail.head,na}</DisplayString>
    <DisplayString ExcludeView="noparens">({*this,view(noparens)})</DisplayString>
    <Expand>
        <Item Name="[0]">head</Item>
        <Item Name="[1]">tail.head</Item>
        <Item Name="[2]">tail.tail.head</Item>
        <Item Name="[3]">tail.tail.tail.head</Item>
        <Item Name="[4]">tail.tail.tail.tail.tail.head</Item>
        <Item Name="[5]">tail.tail.tail.tail.tail.tail.head</Item>
        <Item Name="[6]">tail.tail.tail.tail.tail.tail.tail.head</Item>
        <Item Name="[7]">tail.tail.tail.tail.tail.tail.tail.tail.head</Item>
    </Expand>
</Type>

<Type Name="boost::tuples::tuple&lt;*,*,*,*,*,*,*,*,*,boost::tuples::null_type&gt;">
    <AlternativeType Name="boost::tuples::tuple&lt;*,*,*,*,*,*,*,*,*&gt;" />
    <DisplayString IncludeView="noparens">{head,na}, {tail.head,na}, {tail.tail.head,na}, {tail.tail.tail.head,na}, {tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.tail.tail.tail.head,na}</DisplayString>
    <DisplayString ExcludeView="noparens">({*this,view(noparens)})</DisplayString>
    <Expand>
        <Item Name="[0]">head</Item>
        <Item Name="[1]">tail.head</Item>
        <Item Name="[2]">tail.tail.head</Item>
        <Item Name="[3]">tail.tail.tail.head</Item>
        <Item Name="[4]">tail.tail.tail.tail.tail.head</Item>
        <Item Name="[5]">tail.tail.tail.tail.tail.tail.head</Item>
        <Item Name="[6]">tail.tail.tail.tail.tail.tail.tail.head</Item>
        <Item Name="[7]">tail.tail.tail.tail.tail.tail.tail.tail.head</Item>
        <Item Name="[8]">tail.tail.tail.tail.tail.tail.tail.tail.tail.head</Item>
    </Expand>
</Type>

<Type Name="boost::tuples::tuple&lt;*,*,*,*,*,*,*,*,*,*&gt;">
    <DisplayString IncludeView="noparens">{head,na}, {tail.head,na}, {tail.tail.head,na}, {tail.tail.tail.head,na}, {tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.tail.tail.tail.head,na}, {tail.tail.tail.tail.tail.tail.tail.tail.tail.head,na}</DisplayString>
    <DisplayString ExcludeView="noparens">({*this,view(noparens)})</DisplayString>
    <Expand>
        <Item Name="[0]">head</Item>
        <Item Name="[1]">tail.head</Item>
        <Item Name="[2]">tail.tail.head</Item>
        <Item Name="[3]">tail.tail.tail.head</Item>
        <Item Name="[4]">tail.tail.tail.tail.tail.head</Item>
        <Item Name="[5]">tail.tail.tail.tail.tail.tail.head</Item>
        <Item Name="[6]">tail.tail.tail.tail.tail.tail.tail.head</Item>
        <Item Name="[7]">tail.tail.tail.tail.tail.tail.tail.tail.head</Item>
        <Item Name="[8]">tail.tail.tail.tail.tail.tail.tail.tail.tail.head</Item>
        <Item Name="[9]">tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head</Item>
    </Expand>
</Type>

<Type Name="boost::uuids::uuid">
    <DisplayString LegacyAddin="CPPDebuggerVisualizersNatvisAddIn.dll" Export="BoostUuidFormatter" />
    <Expand>
        <Synthetic Name="variant" Condition="(data[8] &amp; 0x80) == 0x00 &amp;&amp; (data[8] &amp; 0xC0) != 0x80
             &amp;&amp; (data[8] &amp; 0xE0) != 0xC0">
            <DisplayString>ncs</DisplayString>
        </Synthetic>
        <Synthetic Name="variant" Condition="(data[8] &amp; 0xE0) != 0xC0 &amp;&amp; (data[8] &amp; 0xC0) == 0x80
             &amp;&amp; (data[8] &amp; 0xE0) != 0xC0">
            <DisplayString>rfc 4122</DisplayString>
        </Synthetic>
        <Synthetic Name="variant" Condition="(data[8] &amp; 0xE0) != 0xC0 &amp;&amp; (data[8] &amp; 0xC0) != 0x80
             &amp;&amp; (data[8] &amp; 0xE0) == 0xC0">
            <DisplayString>microsoft</DisplayString>
        </Synthetic>
        <Synthetic Name="variant" Condition="(data[8] &amp; 0xE0) != 0xC0 &amp;&amp; (data[8] &amp; 0xC0) != 0x80
             &amp;&amp; (data[8] &amp; 0xE0) != 0xC0">
            <DisplayString>future</DisplayString>
        </Synthetic>
        <Synthetic Name="version" Condition="(data[6] &amp; 0xF0) == 0x10">
            <DisplayString>time based</DisplayString>
        </Synthetic>
        <Synthetic Name="version" Condition="(data[6] &amp; 0xF0) == 0x20">
            <DisplayString>dce security</DisplayString>
        </Synthetic>
        <Synthetic Name="version" Condition="(data[6] &amp; 0xF0) == 0x30">
            <DisplayString>name based md5</DisplayString>
        </Synthetic>
        <Synthetic Name="version" Condition="(data[6] &amp; 0xF0) == 0x40">
            <DisplayString>random number based</DisplayString>
        </Synthetic>
        <Synthetic Name="version" Condition="(data[6] &amp; 0xF0) == 0x50">
            <DisplayString>name based sha1</DisplayString>
        </Synthetic>
        <ArrayItems>
            <Size>16</Size>
            <ValuePointer>data,x</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="boost::value_initialized&lt;*&gt;">
    <DisplayString>{*(($T1 *)(&amp;m_data.x))}</DisplayString>
    <Expand>
        <ExpandedItem>m_data</ExpandedItem>
    </Expand>
</Type>

<Type Name="boost::initialized&lt;*&gt;">
    <DisplayString>{*(($T1 *)(&amp;x))}</DisplayString>
    <Expand>
        <ExpandedItem>x</ExpandedItem>
    </Expand>
</Type>
</AutoVisualizer>
