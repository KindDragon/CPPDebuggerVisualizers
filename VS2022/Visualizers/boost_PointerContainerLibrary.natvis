<?xml version='1.0' encoding='utf-8'?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
<!-- based on https://svn.boost.org/trac/boost/wiki/DebuggerVisualizers -->
<!--Copyright William Buklis 2007. Use, modification and distribution are subject to-->
<!--the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt-->
<!--or copy at http://www.boost.org/LICENSE_1_0.txt)-->
<!--@author   Bill Buklis-->
<!--@email    bill at pbjzone dot com-->
<Type Name="boost::ptr_array&lt;*,*&gt;">
    <AlternativeType Name="boost::ptr_array&lt;boost::nullable&lt;*&gt;,*&gt;" />
    <DisplayString>{{ size={(size_t) $T2} }}</DisplayString>
    <Expand>
        <ArrayItems>
            <Size>$T2</Size>
            <ValuePointer>($T1**)c_.elems</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="boost::void_ptr_iterator&lt;void**,*&gt;">
    <SmartPointer Usage="Minimal">($T1*)(*iter_)</SmartPointer>
    <DisplayString>{($T1*)(*iter_),na}</DisplayString>
    <Expand>
        <Item Name="[ptr]">($T1*)(*iter_)</Item>
    </Expand>
</Type>

<!-- VS2015 -->
<Type Name="boost::ptr_vector&lt;*,*&gt;" Priority="Medium">
    <AlternativeType Name="boost::ptr_vector&lt;boost::nullable&lt;*&gt;,*&gt;" />
    <DisplayString>{{ size={c_._Mypair._Myval2._Mylast - c_._Mypair._Myval2._Myfirst} }}</DisplayString>
    <Expand>
        <Item Name="[size]" ExcludeView="simple">c_._Mypair._Myval2._Mylast - c_._Mypair._Myval2._Myfirst</Item>
        <Item Name="[capacity]" ExcludeView="simple">c_._Mypair._Myval2._Myend - c_._Mypair._Myval2._Myfirst</Item>
        <ArrayItems>
            <Size>c_._Mypair._Myval2._Mylast - c_._Mypair._Myval2._Myfirst</Size>
            <ValuePointer>($T1**)c_._Mypair._Myval2._Myfirst</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="boost::void_ptr_iterator&lt;std::_Vector_iterator&lt;*&gt;,*&gt;">
    <AlternativeType Name="boost::void_ptr_iterator&lt;std::_Vector_const_iterator&lt;*&gt;,*&gt;" />
    <SmartPointer Usage="Minimal">($T2*)(*iter_._Ptr)</SmartPointer>
    <DisplayString>{($T2*)(*iter_._Ptr)}</DisplayString>
    <Expand>
        <Item Name="[ptr]">($T2*)(*iter_._Ptr)</Item>
    </Expand>
</Type>

<!-- VS2015 -->
<Type Name="boost::ptr_map&lt;*,*&gt;" Priority="Medium">
    <AlternativeType Name="boost::ptr_map&lt;*,*,*&gt;" />
    <AlternativeType Name="boost::ptr_multimap&lt;*,*&gt;" />
    <AlternativeType Name="boost::ptr_multimap&lt;*,*,*&gt;" />
    <DisplayString>{{ size={c_._Mypair._Myval2._Myval2._Mysize} }}</DisplayString>
    <Expand>
        <TreeItems>
            <Size>c_._Mypair._Myval2._Myval2._Mysize</Size>
            <HeadPointer>c_._Mypair._Myval2._Myval2._Myhead-&gt;_Parent</HeadPointer>
            <LeftPointer>_Left</LeftPointer>
            <RightPointer>_Right</RightPointer>
            <ValueNode Condition="_Isnil == 0">*(std::pair&lt;$T1,$T2 *&gt;*)&amp;(_Myval)</ValueNode>
        </TreeItems>
    </Expand>
</Type>

<!-- Starting in VS 2015, Update 2, they added a new visualization for map that shows the key in the name column,
   and the value in the value column.  If desired, the "ShowElementsByIndex" view can be used to fall back to the prior
   behavior and show the index in the name column and the key-value pair in the value column. -->
<Type Name="boost::ptr_map&lt;*,*&gt;" ExcludeView="ShowElementsByIndex" Priority="MediumHigh">
    <AlternativeType Name="boost::ptr_map&lt;*,*,*&gt;" />
    <AlternativeType Name="boost::ptr_multimap&lt;*,*&gt;" />
    <AlternativeType Name="boost::ptr_multimap&lt;*,*,*&gt;" />
    <DisplayString>{{ size={c_._Mypair._Myval2._Myval2._Mysize} }}</DisplayString>
    <Expand>
        <TreeItems>
            <Size>c_._Mypair._Myval2._Myval2._Mysize</Size>
            <HeadPointer>c_._Mypair._Myval2._Myval2._Myhead-&gt;_Parent</HeadPointer>
            <LeftPointer>_Left</LeftPointer>
            <RightPointer>_Right</RightPointer>
            <ValueNode Condition="_Isnil == 0" Name="[{_Myval.first}]">*(std::pair&lt;$T1,$T2 *&gt;*)&amp;(_Myval),view(MapHelper)</ValueNode>
        </TreeItems>
    </Expand>
</Type>

<Type Name="boost::ptr_map_iterator&lt;std::_Tree_iterator&lt;*&gt;,*,*&gt;">
    <AlternativeType Name="boost::ptr_map_iterator&lt;std::_Tree_const_iterator&lt;*&gt;,*,*&gt;" />
    <Intrinsic Name="first" Expression="m_iterator._Ptr-&gt;_Myval.first"/>
    <Intrinsic Name="second" Expression="*(($T3*)&amp;m_iterator._Ptr-&gt;_Myval.second)"/>
    <SmartPointer Usage="Minimal">m_iterator._Ptr-&gt;_Isnil ? nullptr : &amp;(m_iterator._Ptr-&gt;_Myval)</SmartPointer>
    <DisplayString Condition="m_iterator._Ptr-&gt;_Isnil == 0">({first()}, {second()})</DisplayString>
    <DisplayString Condition="m_iterator._Ptr-&gt;_Isnil != 0">end</DisplayString>
    <Expand>
        <Synthetic Condition="m_iterator._Ptr-&gt;_Isnil == 0" Name="[ptr]"><DisplayString>({first()}, {second()})</DisplayString></Synthetic>
    </Expand>
</Type>

<!-- VS2015 -->
<Type Name="boost::ptr_set&lt;*&gt;" Priority="Medium">
    <AlternativeType Name="boost::ptr_multiset&lt;*&gt;" />
    <DisplayString>{{ size={c_._Mypair._Myval2._Myval2._Mysize} }}</DisplayString>
    <Expand>
        <TreeItems>
            <Size>c_._Mypair._Myval2._Myval2._Mysize</Size>
            <HeadPointer>c_._Mypair._Myval2._Myval2._Myhead-&gt;_Parent</HeadPointer>
            <LeftPointer>_Left</LeftPointer>
            <RightPointer>_Right</RightPointer>
            <ValueNode Condition="_Isnil == 0">($T1*)_Myval</ValueNode>
        </TreeItems>
    </Expand>
</Type>

<Type Name="boost::void_ptr_iterator&lt;std::_Tree_iterator&lt;*&gt;,*&gt;">
    <AlternativeType Name="boost::void_ptr_iterator&lt;std::_Tree_const_iterator&lt;*&gt;,*&gt;" />
    <SmartPointer Usage="Minimal">($T2*)(iter_._Ptr-&gt;_Myval)</SmartPointer>
    <Expand>
        <Item Name="[ptr]">($T2*)(iter_._Ptr-&gt;_Myval)</Item>
    </Expand>
</Type>

<!-- VS2015 -->
<Type Name="boost::ptr_list&lt;*&gt;" Priority="Medium">
    <AlternativeType Name="boost::ptr_list&lt;boost::nullable&lt;*&gt;,*&gt;" />
    <DisplayString>{{ size={c_._Mypair._Myval2._Mysize} }}</DisplayString>
    <Expand>
        <LinkedListItems>
            <Size>c_._Mypair._Myval2._Mysize</Size>
            <HeadPointer>c_._Mypair._Myval2._Myhead-&gt;_Next</HeadPointer>
            <NextPointer>_Next</NextPointer>
            <ValueNode>($T1*)_Myval</ValueNode>
        </LinkedListItems>
    </Expand>
</Type>

<Type Name="boost::void_ptr_iterator&lt;std::_List_iterator&lt;*&gt;,*&gt;">
    <AlternativeType Name="boost::void_ptr_iterator&lt;std::_List_const_iterator&lt;*&gt;,*&gt;" />
    <SmartPointer Usage="Minimal">($T2*)(iter_._Ptr-&gt;_Myval)</SmartPointer>
    <Expand>
        <Item Name="[ptr]">($T2*)(iter_._Ptr-&gt;_Myval)</Item>
    </Expand>
</Type>

<!-- VS2015 -->
<Type Name="boost::ptr_deque&lt;*&gt;" Priority="Medium">
    <AlternativeType Name="boost::ptr_deque&lt;boost::nullable&lt;*&gt;,*&gt;" />
    <DisplayString>{{ size={c_._Mypair._Myval2._Mysize} }}</DisplayString>
    <Expand>
        <IndexListItems>
            <Size>c_._Mypair._Myval2._Mysize</Size>
            <ValueNode>($T1*)c_._Mypair._Myval2._Map[(($i + c_._Mypair._Myval2._Myoff) / c_._EEN_DS) % c_._Mypair._Myval2._Mapsize][($i + c_._Mypair._Myval2._Myoff) % c_._EEN_DS]</ValueNode>
        </IndexListItems>
    </Expand>
</Type>

<Type Name="boost::void_ptr_iterator&lt;std::_Deque_iterator&lt;*&gt;,*&gt;">
    <AlternativeType Name="boost::void_ptr_iterator&lt;std::_Deque_const_iterator&lt;*&gt;,*&gt;" />
    <DisplayString Condition="iter_._Myoff &lt; (($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Myoff + (($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Mysize">{($T2*)(($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Map[(iter_._Myoff / iter_._EEN_DS) % (($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Mapsize][iter_._Myoff % iter_._EEN_DS]}</DisplayString>
    <DisplayString Condition="iter_._Myoff &gt;= (($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Myoff + (($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Mysize">end</DisplayString>
    <Expand>
        <Item Condition="iter_._Myoff &lt; (($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Myoff + (($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Mysize" Name="[index]">iter_._Myoff - (($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Myoff</Item>
        <Item Condition="iter_._Myoff &lt; (($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Myoff + (($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Mysize" Name="[ptr]">($T2*)(($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Map[(iter_._Myoff / iter_._EEN_DS) % (($T1 *)iter_._Myproxy-&gt;_Mycont)-&gt;_Mapsize][iter_._Myoff % iter_._EEN_DS]</Item>
    </Expand>
</Type>
</AutoVisualizer>
